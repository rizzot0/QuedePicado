// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario (base para todos los tipos de usuario)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones según el rol
  teacher   Teacher?
  parent    Parent?

  @@map("users")
}

// Enum para roles de usuario
enum UserRole {
  TEACHER
  PARENT
  ADMIN
}

// Modelo de Profesor
model Teacher {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjects  Subject[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teachers")
}

// Modelo de Apoderado
model Parent {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  students  Student[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("parents")
}

// Modelo de Alumno
model Student {
  id        String   @id @default(cuid())
  name      String
  lastName  String
  rut       String   @unique
  grade     String   // Curso (ej: "1°A", "2°B")
  parentId  String
  parent    Parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  grades    Grade[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

// Modelo de Asignatura
model Subject {
  id        String   @id @default(cuid())
  name      String   @unique
  teacherId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  grades    Grade[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subjects")
}

// Modelo de Nota
model Grade {
  id        String   @id @default(cuid())
  value     Float
  type      GradeType
  date      DateTime @default(now())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("grades")
}

// Enum para tipos de nota
enum GradeType {
  CONTROL
  PRUEBA
  EXAMEN
  TRABAJO
  OTRO
}
